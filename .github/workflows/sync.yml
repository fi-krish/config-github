name: Sync

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: sync
  cancel-in-progress: true

jobs:
  find-repos:
    runs-on: ubuntu-latest

    outputs:
      repos: ${{ steps.find-repos.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Find All Repositories
        uses: actions/github-script@v7
        id: find-repos
        with:
          script: |
            console.log(`Finding all repositories for ${context.repo.owner}`)

            const data = await github.paginate(
              github.rest.repos.listForUser,
              { username: context.repo.owner }
            )

            console.log(`Found ${data.length} repositories for ${context.repo.owner}`)
            console.log(`Repositories: ${data.map(repo => repo.name).join(', ')}`)

            const repos = data.map(repo => {
              return {
                owner: repo.owner.login,
                repo: repo.name,
              }
            });

            console.log(`Passing ${repos.length} repositories to next jobs`)

            return repos

  sync-labels:
    needs: find-repos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Find Outdated Labels
        id: find-outdated-labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            console.log(`Finding outdated labels for ${repos.length} repositories`)

            const { labels: expectedLabels } = require('${{ github.workspace}}/settings/labels.json')

            console.log(`Found ${expectedLabels.length} expected labels from ${{ github.workspace}}/settings/labels.json`)

            const result = []

            for (const repo of repos) {
              console.log(`Finding labels for ${repo.owner}/${repo.repo}`)

              const labels = await github.paginate(
                github.rest.issues.listLabelsForRepo,
                { ...repo }
              )

              console.log(`Found ${labels.length} labels for ${repo.owner}/${repo.repo}`)

              const labelsToDelete = labels.filter(label => {
                return !expectedLabels.find(expectedLabel => {
                  return expectedLabel.name === label.name
                })
              })

              console.log(`Found ${labelsToDelete.length} labels to delete for ${repo.owner}/${repo.repo}`)

              const labelsToCreate = expectedLabels.filter(expectedLabel => {
                return !labels.find(label => {
                  return expectedLabel.name === label.name
                })
              })

              console.log(`Found ${labelsToCreate.length} labels to create for ${repo.owner}/${repo.repo}`)

              const labelsToUpdate = expectedLabels.filter(expectedLabel => {
                return labels.find(label => {
                  return (expectedLabel.name === label.name && expectedLabel.color.replace('#', '') !== label.color) || (expectedLabel.name === label.name && expectedLabel.description !== label.description)
                })
              })

              console.log(`Found ${labelsToUpdate.length} labels to update for ${repo.owner}/${repo.repo}`)

              result.push({
                repo,
                labelsToDelete,
                labelsToCreate,
                labelsToUpdate
              })
            }

            console.log(`Found ${result.length} repositories with outdated labels`)

            for (const repo of result) {
              console.log(`Updating labels for ${repo.repo.owner}/${repo.repo.repo}`)

              for (const label of repo.labelsToDelete) {
                await github.rest.issues.deleteLabel({
                  ...repo.repo,
                  name: label.name
                })

                console.log(`Deleted label ${label.name} from ${repo.repo.owner}/${repo.repo.repo}`)
              }

              for (const label of repo.labelsToCreate) {
                await github.rest.issues.createLabel({
                  ...repo.repo,
                  ...label,
                  color: label.color.replace('#', '')
                })

                console.log(`Created label ${label.name} in ${repo.repo.owner}/${repo.repo.repo}`)
              }

              for (const label of repo.labelsToUpdate) {
                await github.rest.issues.updateLabel({
                  ...repo.repo,
                  ...label,
                  color: label.color.replace('#', '')
                })

                console.log(`Updated label ${label.name} in ${repo.repo.owner}/${repo.repo.repo}`)
              }
            }


  disable-projects-if-unused:
    needs: find-repos
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Find Projects to Disable
        id: find-projects-to-disable
        uses: actions/github-script@v7
        with:
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}.filter(repo => repo.has_projects)

            console.log(`Finding projects for ${repos.length} repositories`)

            const result = []

            for (const repo of repos) {
              const projects = await github.paginate(
                github.rest.projects.listForRepo,
                { ...repo }
              )

              console.log(`Found ${projects.length} projects for ${repo.owner}/${repo.repo}`)

              if (projects.length === 0) {
                result.push(repo)
              }
            }

            return result

      - name: Disable Projects
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ steps.find-projects-to-disable.outputs.result }}

            console.log(`Disabling projects for ${repos.length} repositories`)

            for (const repo of repos) {
              console.log(`Disabling projects for ${repo.owner}/${repo.repo}`)

              await github.rest.repos.update({
                ...repo,
                has_projects: false
              })

              console.log(`Disabled projects for ${repo.owner}/${repo.repo}`)
            }

  # TODO: implement this
  # disable-wiki-if-unused:
  #   needs: find-repos
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Find Wikis to Disable
  #       id: find-wikis-to-disable
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const repos = ${{ needs.find-repos.outputs.repos }}

  #     - name: Disable Wikis
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.GH_OWNER_TOKEN }}
  #         script: |
  #           const repos = ${{ steps.find-wikis-to-disable.outputs.result }}

  #           console.log(`Disabling wikis for ${repos.length} repositories`)

  #           for (const repo of repos) {
  #             console.log(`Disabling wiki for ${repo.owner}/${repo.repo}`)

  #             await github.rest.repos.update({
  #               ...repo,
  #               has_wiki: false
  #             })

  #             console.log(`Disabled wiki for ${repo.owner}/${repo.repo}`)
  #           }

  merge-strategies:
    needs: find-repos
    runs-on: ubuntu-latest

    env:
      ALLOW_SQUASH_MERGE: true
      ALLOW_REBASE_MERGE: true
      ALLOW_MERGE_COMMIT: false
      AUTOMERGE_ENABLED: false
      DELETE_BRANCH_ON_MERGE: true
      REQUIRE_WEB_COMMIT_SIGNATURE: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Merge Strategy
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}

            console.log(`Setting merge strategy for ${repos.length} repositories`)

            for (const repo of repos) {
              console.log(`Setting merge strategy for ${repo.owner}/${repo.repo}`)

              await github.rest.repos.update({
                ...repo,
                allow_squash_merge: process.env.ALLOW_SQUASH_MERGE === 'true',
                allow_rebase_merge: process.env.ALLOW_REBASE_MERGE === 'true',
                allow_merge_commit: process.env.ALLOW_MERGE_COMMIT === 'true',
                automerge_enabled: process.env.AUTOMERGE_ENABLED === 'true',
                delete_branch_on_merge: process.env.DELETE_BRANCH_ON_MERGE === 'true',
                require_commit_signatures: process.env.REQUIRE_WEB_COMMIT_SIGNATURE === 'true'
              })

              console.log(`Set merge strategy for ${repo.owner}/${repo.repo}`)
            }

  sync-rulesets:
    needs: find-repos
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Sync Rulesets
        uses: actions/github-script@v7
        env:
          SKIP_REPOS: ''
        with:
          github-token: ${{ secrets.GH_OWNER_TOKEN }}
          script: |
            const repos = ${{ needs.find-repos.outputs.repos }}
            const { rulesets } = require('${{ github.workspace}}/settings/rulesets.json')

            console.log(`Config has ${rulesets.length} rulesets`)

            console.log(`Syncing rulesets for ${repos.length} repositories`)

            for (const repo of repos) {
              console.log(`Finding rulesets for ${repo.owner}/${repo.repo}`)

              const rulesets = await github.rest.repos.getRepoRulesets({
                ...repo
              })

              console.log(`Found ${rulesets.length} rulesets for ${repo.owner}/${repo.repo}`)

              if (process.env.SKIP_REPOS.split(',').includes(`${repo.owner}/${repo.repo}`)) {
                console.log(`Skipping rulesets for ${repo.owner}/${repo.repo}`)

                continue
              }

              if (rulesets.length > 0) {
                console.log(`Deleting rulesets for ${repo.owner}/${repo.repo}`)

                for (const ruleset of rulesets) {
                  await github.rest.repos.deleteRepoRuleset({
                    ...repo,
                    ruleset_id: ruleset.id
                  })

                  console.log(`Deleted ruleset ${ruleset.id} for ${repo.owner}/${repo.repo}`)
                }
              }

              console.log(`Syncing rulesets for ${repo.owner}/${repo.repo}`)

              for (const ruleset of rulesets) {
                await github.rest.repos.createRepoRuleset({
                  ...repo,
                  ...ruleset
                })

                console.log(`Synced ruleset ${ruleset.name} for ${repo.owner}/${repo.repo}`)
              }

              console.log(`Synced rulesets for ${repo.owner}/${repo.repo}`)
            }
